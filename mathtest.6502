oswrch = &ffee
osnewl = &ffe7
osasci = &ffe3

TEST_MULTIPLY = FALSE
TEST_SHIPPLOT = FALSE
TEST_SINCOS = FALSE
TEST_HCALC = FALSE
TEST_THRUSTADD = FALSE
TEST_MULXY = FALSE
TEST_DEC16 = FALSE
TEST_DEC24 = FALSE
TEST_ANGLES = FALSE
TEST_PARTICLES = FALSE
TEST_ZERODEPTH = FALSE
TEST_LINEAR = FALSE
TEST_TBM = TRUE

ORG &70

GUARD &90

.temp_scene
.matha
    SKIP 2
.mathb
    SKIP 1
.mathc
    SKIP 3
.maths
    SKIP 1
.digits
.zangle
    SKIP 1
.yangle
    SKIP 1
.jtmp
    SKIP 2
.pixelmask
    SKIP 2
.x0
.particle_xdir
    SKIP 1
.y0
.particle_ydir
    SKIP 1
.x1
.particle_zdir
    SKIP 1
.xthrust
.y1
    SKIP 1
.zthrust
.rand_seed
.maxshipy
.xlptr
    SKIP 2
.ship_height
    SKIP 1
.land_height
    SKIP 1
.player_y
    SKIP 1
.player_y1
    SKIP 1
.zcoff
.current_particle
    SKIP 1
.interp_tmp
.actual_landheight
    SKIP 2
platheight  = 40
land_offset = 40

    INCLUDE "macros.6502"

ORG &3000
.start
    LDA #32
    STA ship_height

IF TEST_MULTIPLY
    JSR write_stringstars
    EQUS "Multiply 8-bit by 16-bit", 13, 0
    LDA #1
    LDX #0
    LDY #1
    JSR repmul

    LDA #&ff
    LDX #&ff
    LDY #&ff
    JSR repmul

    LDA #&1
    LDX #&ff
    LDY #&ff
    JSR repmul

    LDA #&1
    LDX #&0
    LDY #&ff
    JSR repmul

    LDA #&10
    LDX #&0
    LDY #&ff
    JSR repmul

    LDA #&10
    LDX #&0
    LDY #&10
    JSR repmul

    LDA #&70
    LDX #&0
    LDY #&70
    JSR repmul

    LDA #&70
    LDX #&70
    LDY #&70
    JSR repmul

    LDA #&70
    LDX #&01
    LDY #&70
    JSR repmul

    LDA #&60
    LDX #&03
    LDY #&60
    JSR repmul

    LDA #&7e
    LDX #&33
    LDY #&60
    JSR repmul

    LDA #&7e
    LDX #&53
    LDY #&5b
    JSR repmul
ENDIF

IF TEST_SHIPPLOT
    JSR write_stringstars
    EQUS "Ship plotting", 13, 0
    LDA #HI(shipdata)
    JSR writehex
    LDA #LO(shipdata)
    JSR writehex
    JSR space

    LDA shipdata + 1
    JSR writehex
    LDA shipdata
    JSR writehex
    JSR space

    JSR fixship

    LDA shipdata + 1
    JSR writehex
    LDA shipdata
    JSR writehex
    JSR space
    LDA shipdata + 3
    JSR writehex
    LDA shipdata + 2
    JSR endhex

    LDA #0
    STA zangle
    STA yangle
    JSR repship

    LDA #16
    STA yangle
    JSR repship

    LDA #32
    STA yangle
    JSR repship
ENDIF

IF TEST_SINCOS
    JSR write_stringstars
    EQUS "Sin/cosine", 13, 0
    LDA #0
    JSR repsc
    LDA #10
    JSR repsc
    LDA #16
    JSR repsc
    LDA #32
    JSR repsc
    LDA #48
    JSR repsc
    LDA #64
    JSR repsc
    LDA #96
    JSR repsc
    LDA #128
    JSR repsc
    LDA #160
    JSR repsc
    LDA #192
    JSR repsc
    LDA #208
    JSR repsc
ENDIF

IF TEST_THRUSTADD
    JSR write_stringstars
    EQUS "Thrust addition", 13, 0
    LDA #0
    STA matha
    STA matha + 1
    LDA #0
    JSR repthadd
    LDA #32
    JSR repthadd
    LDA #32
    JSR repthadd
    LDA #LO(-32)
    JSR repthadd
    LDA #LO(-32)
    JSR repthadd
    LDA #LO(-32)
    JSR repthadd
    LDA #LO(-32)
    JSR repthadd
ENDIF

IF TEST_MULXY
    JSR write_stringstars
    EQUS "Multiply X by Y", 13, 0
    LDX #64
    LDY #64
    JSR repmulxy
    LDX #LO(-64)
    LDY #64
    JSR repmulxy
    LDX #LO(-64)
    LDY #LO(-64)
    JSR repmulxy
    LDX #64
    LDY #LO(-64)
    JSR repmulxy

    LDX #1
    LDY #64
    JSR repmulxy

    LDX #12
    LDY #34
    JSR repmulxy
ENDIF

IF TEST_HCALC
    JSR write_stringstars
    EQUS "Height calculation", 13, 0
    LDX #LO(platheight - 128)
    LDY #HI(platheight - 128)
    JSR rephc

    LDX #LO(platheight - 32)
    LDY #HI(platheight - 32)
    JSR rephc

    LDX #LO(platheight - 1)
    LDY #HI(platheight - 1)
    JSR rephc

    LDX #LO(platheight + 0)
    LDY #HI(platheight + 0)
    JSR rephc

    LDX #LO(platheight + 1)
    LDY #HI(platheight + 1)
    JSR rephc

    LDX #LO(platheight + 32)
    LDY #HI(platheight + 32)
    JSR rephc

    LDX #LO(platheight + 128)
    LDY #HI(platheight + 128)
    JSR rephc

    LDX #128
    LDY #0
    JSR rephc

    LDX #29
    LDY #0
    JSR rephc

    LDX #229
    LDY #1
    JSR rephc

    LDX #48
    LDY #2
    JSR rephc
ENDIF

IF TEST_DEC16
    JSR write_stringstars
    EQUS "16-bit decimal"
    LDX #LO(12345)
    LDY #HI(12345)
    JSR repdec16

    LDX #LO(1)
    LDY #HI(1)
    JSR repdec16

    LDX #LO(0)
    LDY #HI(0)
    JSR repdec16

    LDX #LO(9)
    LDY #HI(9)
    JSR repdec16

    LDX #LO(10)
    LDY #HI(10)
    JSR repdec16

    LDX #LO(99)
    LDY #HI(99)
    JSR repdec16

    LDX #LO(100)
    LDY #HI(100)
    JSR repdec16

    LDX #LO(255)
    LDY #HI(255)
    JSR repdec16

    LDX #LO(256)
    LDY #HI(256)
    JSR repdec16

    LDX #LO(999)
    LDY #HI(999)
    JSR repdec16

    LDX #LO(1000)
    LDY #HI(1000)
    JSR repdec16
ENDIF

IF TEST_DEC24
    JSR write_stringstars
    EQUS "24-bit decimal", 13, 0
    LDX #LO(1000)
    LDY #HI(1000)
    LDA #1000 / 65536
    JSR repdec24

    LDX #LO(9999)
    LDY #HI(9999)
    LDA #10000 / 65536
    JSR repdec24

    LDX #LO(65535)
    LDY #HI(65535)
    LDA #65535 / 65536
    JSR repdec24

    LDX #LO(65536)
    LDY #HI(65536)
    LDA #65536 / 65536
    JSR repdec24

    LDX #LO(165536)
    LDY #HI(165536)
    LDA #0165536 / 65536
    JSR repdec24

    LDX #LO(9165536)
    LDY #HI(9165536)
    LDA #9165536 / 65536
    JSR repdec24
ENDIF

IF TEST_ANGLES
    JSR write_stringstars
    EQUS "Angles", 13, 0
    LDY #0
    LDA #0
    JSR repangle

    LDY #64
    LDA #0
    JSR repangle

    LDY #208
    LDA #0
    JSR repangle

    LDY #0
    LDA #31
    JSR repangle

    LDY #64
    LDA #31
    JSR repangle

    LDY #208
    LDA #31
    JSR repangle

    LDY #0
    LDA #63
    JSR repangle

    LDY #64
    LDA #63
    JSR repangle

    LDY #208
    LDA #63
    JSR repangle
ENDIF

IF TEST_PARTICLES
    JSR write_stringstars
    EQUS "Particles", 13, 0
    LDY #0
    LDA #0
    JSR repangle
    
    JSR write_string
    EQUS "Player height=", 0
    LDA #1
    STA current_particle
    LDA #1
    STA player_y1
    LDA #0
    STA player_y
    LDX #player_y
    JSR writehex4
    JSR osnewl

    JSR hcalc
    JSR write_string
    EQUS "Land height=", 0
    LDX #actual_landheight
    JSR writehex4
    JSR write_string
    EQUS 13, "Ship height=", 0
    LDA ship_height
    JSR endhex
    LDA #94
    STA xthrust
    JSR write_string
    EQUS "X thrust=", 0
    LDA xthrust
    JSR endhex

    JSR create_particle
    JSR reppart
    JSR move_particles
    JSR reppart
    JSR move_particles
    JSR reppart
    JSR move_particles
    JSR reppart
    JSR move_particles
    JSR reppart
ENDIF

IF TEST_ZERODEPTH
    JSR write_stringstars
    EQUS "Effective zero depth", 13, 0
    LDY #1
    LDX #32
    JSR depthY
    LDA mathc + 2
    JSR writehex
    LDX #mathc
    JSR writehex4
    JSR osnewl

    LDY #2
    LDX #32
    JSR depthY
    LDA mathc + 2
    JSR writehex
    LDX #mathc
    JSR writehex4
    JSR osnewl

    LDY #1
    LDX #0
    JSR depthY
    LDA mathc + 2
    JSR writehex
    LDX #mathc
    JSR writehex4
    JSR osnewl

    LDY #2
    LDX #0
    JSR depthY
    LDA mathc + 2
    JSR writehex
    LDX #mathc
    JSR writehex4
    JSR osnewl
ENDIF

IF TEST_LINEAR
    LDX #0
    LDY #63
    LDA #0
    JSR replinear

    LDX #0
    LDY #63
    LDA #64
    JSR replinear

    LDX #0
    LDY #63
    LDA #128
    JSR replinear

    LDX #0
    LDY #63
    LDA #192
    JSR replinear

    LDX #63
    LDY #0
    LDA #0
    JSR replinear

    LDX #63
    LDY #0
    LDA #64
    JSR replinear

    LDX #63
    LDY #0
    LDA #128
    JSR replinear

    LDX #63
    LDY #0
    LDA #192
    JSR replinear
ENDIF

MACRO TEST_MULXY6 a, b
    LDX #LO(a)
    LDY #LO(b)
    JSR rep_tbnmul
    LDA #'|'
    JSR oswrch
    LDA #HI(a * b * 4)
    JSR writehex
    LDA #LO(a * b * 4)
    JSR writehex
    JSR osnewl
ENDMACRO

IF TEST_TBM
    TEST_MULXY6 0, 0
    TEST_MULXY6 1, 1
    TEST_MULXY6 16, 1
    TEST_MULXY6 1, 16
    TEST_MULXY6 -1, 16
    TEST_MULXY6 -4, 4
    TEST_MULXY6 16, 16
    TEST_MULXY6 16, -16
    TEST_MULXY6 -16, -16
    TEST_MULXY6 18, 63
    TEST_MULXY6 -18, -63
    TEST_MULXY6 -18, 63
    TEST_MULXY6 32, 63
    TEST_MULXY6 63, 32
    TEST_MULXY6 63, 63
    TEST_MULXY6 64, 32
    TEST_MULXY6 32, 64
    TEST_MULXY6 63, 64
    TEST_MULXY6 32, 68
    TEST_MULXY6 63, 68
    TEST_MULXY6 -13, -17
    TEST_MULXY6 -57, -43
ENDIF

.loop
    JMP loop

.rep_tbnmul
    TYA
    JSR writehex
    LDA #'x'
    JSR oswrch
    TXA
    JSR writehex
    LDA #'='
    JSR oswrch
    JSR mulxy6
    LDX #mathc
    JMP writehex4

.replinear
    PHA
    PHA
    TXA
    JSR writehex
    JSR comma
    TYA
    JSR writehex
    JSR comma
    PLA
    JSR writehex
    LDA #'='
    JSR oswrch
    PLA
    JSR linear_interpolation
    JMP endhex

.repangle
    STY yangle
    STA zangle
.repangle2
{
    JSR set_angle
    LDA yangle
    JSR writehex
    JSR comma
    LDA zangle
    JSR writehex
    JSR space
    LDA particle_xdir
    JSR writehex
    JSR comma
    LDA particle_ydir
    JSR writehex
    JSR comma
    LDA particle_zdir
    JMP endhex
}

.reppart
{
    LDA particle_age
    JSR writehex
    LDA #'-'
    JSR oswrch
    LDA particle_xh
    JSR writehex
    LDA particle_xl
    JSR writehex
    JSR plus
    LDA particle_dx
    JSR writehex
    JSR comma
    LDA particle_ye
    JSR writehex
    LDA particle_yh
    JSR writehex
    LDA particle_yl
    JSR writehex
    JSR plus
    LDA particle_dy
    JSR writehex
    JSR comma
    LDA particle_zh
    JSR writehex
    LDA particle_zl
    JSR writehex
    JSR plus
    LDA particle_dz
    JSR writehex
    JSR space
    JSR plot_particles
    JMP osnewl
    PHA
    JSR comma
    PLA
    JMP endhex
}

.repdec16
{
    STX mathc
    STY mathc + 1
    LDX #mathc
    JSR writehex4
    LDA #'='
    JSR oswrch
    JSR bin2dec16
    TAY
    ORA #'0'
    JSR oswrch
    JSR plus
    LDA #'0'
.prefix_loop
    CPY #3
    BCS already_long
    JSR oswrch
    INY
    BNE prefix_loop
.already_long
    LDX #0
.rdloop
    LDA digits, X
    BMI rddone
    ORA #&30
    JSR oswrch
    INX
    BNE rdloop
.rddone
    JMP osnewl
}

.repdec24
{
    STX mathc
    STY mathc + 1
    STA mathc + 2
    JSR writehex
    LDX #mathc
    JSR writehex4
    LDA #'='
    JSR oswrch
    JSR bin2dec24
    TAY
    ORA #'0'
    JSR oswrch
    JSR plus
    LDA #'0'
.prefix_loop
    CPY #7
    BCS already_long
    JSR oswrch
    INY
    BNE prefix_loop
.already_long
    LDX #0
.rdloop
    LDA digits, X
    BMI rddone
    ORA #&30
    JSR oswrch
    INX
    BNE rdloop
.rddone
    JMP osnewl
}

.hcalc
    INCLUDE "hcalc.6502"
    RTS

.rephc
    STX player_y
    STY player_y + 1
    LDX #player_y
    JSR writehex4
    LDA #'='
    JSR oswrch

    JSR hcalc

    LDA ship_height
    JSR writehex
    JSR comma
    LDA land_height
    JSR writehex
    JSR space
    LDX #mathc
    JSR writehex4
    JSR space
    LDX #actual_landheight
    JSR writehex4
    JMP osnewl

.repmulxy
    TXA
    JSR writehex
    LDA #'x'
    JSR oswrch
    TYA
    JSR writehex
    LDA #'='
    JSR oswrch
    JSR mulxy
    LDX #mathc
    JSR writehex4
    JMP osnewl

.repthadd
    TAX
    JSR writehex
    LDA #'+'
    JSR oswrch
    LDA matha
    JSR writehex
    LDA #'='
    JSR oswrch
    TXA
    THRUSTADD matha
    LDA matha 
    JMP endhex

.repsc
    PHA
    JSR writehex
    LDA #'='
    JSR oswrch
    PLA
    JSR sincos
    TXA
    JSR writehex
    JSR comma
    TYA
    JMP endhex

.repship
    JSR plot_ship
    PHA
    LDA yangle
    JSR writehex
    JSR comma
    LDA zangle
    JSR writehex
    JSR space
    PLA
    JSR writehex
    JSR comma
    LDA mathb
    JSR writehex

    JSR space

    LDX #xlptr
    JSR writehex4

    JSR comma

    LDX #jtmp
    JSR writehex4

    JSR space

    LDX #matha
    JSR writehex4
    JMP osnewl

.space
    LDA #' '
    JMP oswrch
.comma
    LDA #','
    JMP oswrch
.plus
    LDA #'+'
    JMP oswrch

.plot_line
    LDA x0
    JSR writehex
    JSR comma
    LDA y0
    JSR writehex
    JSR space
    LDA x1
    JSR writehex
    JSR comma
    LDA y1
    JMP endhex

.repmul
    STA matha
    STX matha + 1
    STY mathb

    LDX #matha
    JSR writehex4
    LDA #'x'
    JSR oswrch
    LDA mathb
    JSR writehex
    LDY mathb
    JSR multbyy
    LDA #'='
    JSR oswrch
    LDX #mathc + 1
    JSR writehex4
    LDA mathc
.endhex
    JSR writehex
    JMP osnewl

    INCLUDE "math.6502"

.writehex4
    LDA 1, X
    JSR writehex
    LDA 0, X
.writehex
    PHA
    LSR A
    LSR A
    LSR A
    LSR A
    JSR write4
    PLA
    AND #15
.write4
    CMP #10
    BCC less10
    ADC #'A' - 11
    JMP oswrch
.less10
    ADC #'0'
    JMP oswrch

.pixel
    TXA
    JSR writehex
    JSR comma
    TYA
    JMP writehex

.set_angle
    LDA zangle
    JSR sincos
    STX zcoff
    TYA
    STA particle_ydir       ; Store this for the particle creation

    LDA yangle
    JSR sincos
    STX mathb

    LDX zcoff
    JSR mulxy

    LDA mathc + 1
    ASL mathc
    ROL A
    ASL mathc
    ROL A
    ASL mathc
    ROL A
    ASL mathc
    ROL A
    TAY
    DEY                  ; X direction is negative (for some reason!)
    TYA
    EOR #255
    STA particle_xdir       ; Store this for the particle creation

    LDY mathb
    LDX zcoff
    JSR mulxy
    LDA mathc + 1
    ASL mathc
    ROL A
    ASL mathc
    ROL A
    ASL mathc
    ROL A
    ASL mathc
    ROL A
    STA particle_zdir       ; Store this for the particle creation
    RTS

.writedec
{
    CMP #0
    BPL decpositive
    EOR #255
    CLC
    ADC #1
    PHA
    LDA #'-'
    JSR oswrch
    PLA
.decpositive
    STA mathc
    LDY #0
    STY mathc + 1
    JSR bin2dec16
    LDX #0
.rdloop
    LDA digits, X
    BMI rddone
    ORA #&30
    JSR oswrch
    INX
    BNE rdloop
.rddone
    RTS
}

.writedec4
{
    LDY 0, X
    LDA 1, X
    STA mathc + 1
    STY mathc
    BPL decpositive
    TAX
    LDA #'-'
    JSR oswrch
    LDA #255
    SEC
    SBC mathc
    STA mathc
    LDA #255
    SBC mathc + 1
    STA mathc + 1    
.decpositive
    JSR bin2dec16
    LDX #0
.rdloop
    LDA digits, X
    BMI rddone
    ORA #&30
    JSR oswrch
    INX
    BNE rdloop
.rddone
    RTS
}

.write_stringstars
    JSR write_string
    EQUS 13, "**TEST: ", 0

.write_string
{
    PLA
    STA readaddr + 1
    PLA
    STA readaddr + 2
.writestr_loop
    INC readaddr + 1
    BNE readaddr
    INC readaddr + 2
.readaddr
    LDA &1234
    BEQ writestr_end
    JSR osasci
    JMP writestr_loop
.writestr_end
    INC readaddr + 1
    BNE writestr_rts
    INC readaddr + 2
.writestr_rts
    JMP (readaddr + 1)
}

    INCLUDE "particles.6502"
    INCLUDE "ship3d.6502"

    ALIGN 64
    INCLUDE "ship.6502"

.end
    SKIP 0
    SAVE "MATHTST", start, end
