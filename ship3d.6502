ship_pointcount = 6
ship_factcount = 8

.rotate_ship
{
    siny = x0
    cosy = y0
    sinz = x1
    cosz = y1
    curx = digits + 0
    cury = digits + 1
    curz = digits + 2
    xp = digits + 3
    yp = digits + 4
    xpp = digits + 5
    zpp = yp            ; These don't overlap!

; Get the sine and cosine of the angles
    LDA yangle
    JSR hrcos
    STA cosy
    LDA yangle
    JSR hrsin
    STA siny
    LDA zangle
    JSR hrcos
    STA cosz
    LDA zangle
    JSR hrsin
    STA sinz

    LDY #ship_pointcount - 1
.ship_rotloop
    STY jtmp
    LDX ship_xpoints, Y
    STX curx        ; Store X
    LDX ship_zpoints, Y
    STX curz        ; Store Z
    LDX ship_ypoints, Y
    STX cury        ; Store Y

; Y' = Y * cosz - X * sinz
; X is already Y (IYKWIM!)
    LDY cosz
    JSR mulxy6          ; X * cosz
    LDA mathc + 1
    STA yp

    LDX curx
    LDY sinz
    JSR mulxy6          ; X * sinz
    LDA yp
    SEC
    SBC mathc + 1
    LDY jtmp
    STA ship_yrot, Y    ; Save Y'

; X' = X * cosx + Y * sinz
    LDX curx
    LDY cosz
    JSR mulxy6          ; X * cosz
    LDA mathc + 1
    STA xp

    LDX cury
    LDY sinz
    JSR mulxy6          ; Y * sinz
    LDA mathc + 1
    CLC
    ADC xp
    STA xp              ; Save X'

; X'' = X' * cosy - Z * siny
    LDX xp
    LDY cosy
    JSR mulxy6          ; X' * cosy
    LDA mathc + 1
    STA xpp

    LDX curz
    LDY siny
    JSR mulxy6          ; Z * siny

    LDA jtmp + 1
    SEC
    SBC mathc + 1
    STA xpp             ; Save X''

; Z'' = Z * cosy + X' * siny
    LDX curz
    LDY cosy
    JSR mulxy6          ; Z * cosy
    LDA mathc + 1
    STA zpp

    LDX xp
    LDY siny
    JSR mulxy6          ; X' * siny
    LDA zpp
    CLC
    ADC mathc + 1
    LDY jtmp
    STA ship_zrot, Y    ; Save Z''
    LDA xpp
    STA ship_xrot, Y    ; Copy X''
    DEY
    BPL ship_rotloop
}

.ship_xpoints
; X, Y, Z
    EQUB 0, 0, 18, 7, LO(-7), LO(-18)
.ship_ypoints
    EQUB 7, 0, 3, 0, 0, 3
.ship_zpoints
    EQUB 0, LO(-15), 0, 18, 18, 0

.ship_xrot
    SKIP ship_pointcount
.ship_yrot
    SKIP ship_pointcount
.ship_zrot
    SKIP ship_pointcount

.ship_x2d
    SKIP ship_pointcount * 2
.ship_y2d
    SKIP ship_pointcount * 2

.ship_facets
; Ship facets consist of a bitfield
; Bits 0..1 = Vector point 1 (allows 0-3)
; Bits 2..4 = Vector point 2 (allows 0-7)
; Bits 5..7 = Vector point 3 (allows 0-7)

; Top
    EQUB (0 << 0) OR (1 << 2) OR (2 << 5)
    EQUB (0 << 0) OR (2 << 2) OR (3 << 5)
    EQUB (0 << 0) OR (3 << 2) OR (4 << 5)
    EQUB (0 << 0) OR (4 << 2) OR (5 << 5)
    EQUB (0 << 0) OR (5 << 2) OR (1 << 5)
; Bottom
    EQUB (1 << 0) OR (3 << 2) OR (2 << 5)
    EQUB (1 << 0) OR (4 << 2) OR (3 << 5)
    EQUB (1 << 0) OR (5 << 2) OR (4 << 5)
