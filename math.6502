
.depthY
    ; Calculates the coordinate based on the given depth
    ; Y = X or Y; X = depth
    ; Populates mathc with the given calculation
    LDA divtableLY, X
    STA matha
    LDA divtableHY, X
    STA matha + 1
    JMP multbyy

.depthX
    ; Calculates the coordinate based on the given depth
    ; Y = X or Y; X = depth
    ; Populates mathc with the given calculation
    LDA divtableLX, X
    STA matha
    LDA divtableHX, X
    STA matha + 1

.multbyy
    ; matha is the multiplier
    ; Y is the other multiplier
{
    STY mathb
    TYA
    BEQ iszero
    EOR matha + 1
    STA maths
    TYA
    BPL mulpos1
    EOR #255
    SEC
    ADC #0
    STA mathb
.mulpos1
    LDA matha + 1
    BPL mulpos2
    SEC
    LDA #0
    SBC matha
    STA matha
    LDA #0
    SBC matha + 1
    STA matha + 1
.mulpos2

    LDA #0
    STA mathc + 1
    LDX #8
.mull1
    LSR mathb
    BCC mull2
    TAY
    CLC
    LDA matha
    ADC mathc + 1
    STA mathc + 1
    TYA
    ADC matha + 1
.mull2
    ROR A
    ROR mathc + 1
    ROR mathc
    DEX
    BNE mull1
    STA mathc + 2
    
    LDA maths
    BPL mull3
    LDA mathc + 0
    EOR #255
    SEC
    ADC #0
    STA mathc + 0
    LDA mathc + 1
    EOR #255
    ADC #0
    STA mathc + 1
    LDA mathc + 2
    EOR #255
    ADC #0
    STA mathc + 2
.mull3
    RTS
.iszero
    STY mathc
    STY mathc + 1
    STY mathc + 2
    RTS
}

.usmulxy
{
    STX mathc
    STY mathc + 1
    LDA #0
    LDX #8
    LSR mathc
.mulxyloop
    BCC no_add
    CLC
    ADC mathc + 1
.no_add
    ROR A
    ROR mathc
    DEX
    BNE mulxyloop
    STA mathc + 1
    RTS
}

.mulxy
; Multiply X by Y
{
    TXA
    BEQ iszero
    STY mathc + 1
    EOR mathc + 1
    STA matha

; Check if X is positive
    TXA
    BEQ iszero
    BPL xpos
    EOR #255
    CLC
    ADC #1
    TAX
.xpos
    STX mathc

; Check if Y is nnegative
    TYA
    BPL ypos
    EOR #255
    CLC
    ADC #1
    STA mathc + 1
.ypos
    LDA #0
    LDX #8
    LSR mathc
.mulxyloop
    BCC no_add
    CLC
    ADC mathc + 1
.no_add
    ROR A
    ROR mathc
    DEX
    BNE mulxyloop
    STA mathc + 1
    LDA matha
    BMI bothneg
    RTS
.bothneg
    LDA #0
    SEC
    SBC mathc
    STA mathc
    LDA #0
    SBC mathc + 1
    STA mathc + 1
    RTS
.iszero
    LDA #0
    STA mathc
    STA mathc + 1
    RTS
}

.mulxy6
; Multiply X by Y, where X is netween -63 and 63; Y can be outside of this, but the result
; must be < 32768
; Returned value is multiplied by 4
{
    TXA
    BEQ iszero
    STY mathc + 1
    EOR mathc + 1
    STA matha

; Check if X is positive
    TXA
    BEQ iszero
    BPL xpos
    EOR #255
    CLC
    ADC #1
    TAX
.xpos
    STX mathc

; Check if Y is negative
    TYA
    BPL ypos
    EOR #255
    CLC
    ADC #1
    STA mathc + 1
.ypos
    LDA #0
    LDX #6
    LSR mathc
.mulxyloop
    BCC no_add
    CLC
    ADC mathc + 1
.no_add
    ROR A
    ROR mathc
    DEX
    BNE mulxyloop
    STA mathc + 1
    LDA matha
    BMI bothneg
    RTS
.bothneg
    LDA #0
    SEC
    SBC mathc
    STA mathc
    LDA #0
    SBC mathc + 1
    STA mathc + 1
    RTS
.iszero
    LDA #0
    STA mathc
    STA mathc + 1
    RTS
}

IF FALSE
    ; Calculates the cosine of A (0..255), multiplied by Y
.cos
{
    SEC
    SBC #64
}
    ; Calculates the sine of A (0..255), multiplied by Y
.sin
{
    CMP #0
    BPL sinquad12   ; If positive, we don't need to negate Y
    TAX             ; Here, we're relying on SIN(A + 180) = -SIN(A)
    TYA
    EOR #255
    CLC
    ADC #1
    TAY             ; Negate Y
    TXA
    AND #127        ; And convert A to 0..180
.sinquad12
    CMP #64
    BMI sinquad0
    AND #63         ; Here, we're relying on SIN(A) = SIN(180 - A) where A = 90..179
    EOR #63
.sinquad0
    TAX
    LDA sintable, X
    STA matha
    LDA #0
    STA matha + 1
    JMP multbyy
}
ENDIF

.sincos
; Gets the sin (in X) and cosine (in Y) on A (0..255)
    LSR A
    LSR A
    TAX
    CLC
    ADC #16
    AND #63
    TAY
    LDA sincostable, X
    TAX
    LDA sincostable, Y
    TAY
    RTS

.bin2dec16
{
; Converted from https://stardot.org.uk/forums/viewtopic.php?t=25451
; Value is in 'mathc' (16-bit), written to 'digits', with 255 being terminator
; A is the number of digits
    value = mathc
    flag = mathb
   
    LDA #LO(digits)
    STA digit_write16 + 1
.doconvert16
    LDX #4
    LDA #1
    STA flag
    LDA #&20
.nextdigit
    LSR value + 1
    ROR value
.loop
    TAY
    ROL value
    ROL value + 1
    BCS skip1
    LDA value
    CMP tablo, X
    LDA value + 1
    SBC tabhi, X
    BCC skip2
.skip1
    LDA value
    SBC tablo, X
    STA value
    LDA value + 1
    SBC tabhi, X
    STA value + 1
    SEC
.skip2
    TYA
    ROL A
    BCC loop
    BNE nonzero
    CPX flag
    BCS skipleadingzero
.nonzero
    STX flag
.digit_write16
    STA digits
    INC digit_write16 + 1
    ;EOR #&30
    ;JSR oswrch
.skipleadingzero
    LDA #&10
    DEX
    BPL nextdigit
    LDX digit_write16 + 1
    LDA #255
    STA 0, X
    TXA
    SEC
    SBC #LO(digits)
    RTS

.tablo EQUB &00:EQUB &00:EQUB &00:EQUB &00
.tabhi EQUB &40:EQUB &50:EQUB &64:EQUB &7D:EQUB &9C
}

.bin2dec24
; Converted from https://stardot.org.uk/forums/viewtopic.php?t=25451
; Value is in 'mathc' (24-bit), written to 'digits', with 255 being terminator
; A is the number of digits
{
    value = mathc
    LDX #0
    LDA #255
    PHA
.calcloop
    CLV
    LDA #0
    LDY #23
.loop
    CMP #5
    BCC skip
    SBC #5 + 128
    SEC
.skip
    ROL value
    ROL value+1
    ROL value+2
    ROL A
    DEY
    BPL loop
    PHA
    BVS calcloop
    PLA
.printloop
    STA digits, X
    INX
    PLA
    BPL printloop
    LDA #255
    STA digits, X
    TXA
    RTS
}

.linear_interpolation
; Perform a linear interpolation of numbers from 0..63
; X = first number
; Y = second number
; A = 0 == full first number, 255 = most 2nd number
; Returns A as the interpolated number
{
    STX interp_tmp
    CPY interp_tmp
    BEQ no_interpolation
    AND #192
    BEQ no_interpolation
    BMI last_quadrants
; This is 3/4 X, and 1/4 Y
    TXA
    ASL A
    ADC interp_tmp ; x3
    STY interp_tmp
    ADC interp_tmp
    LSR A
    LSR A
    RTS

.no_interpolation
    TXA
    RTS

.last_quadrants
    AND #64
    BEQ second_quadrant
; This is 1/4 X and 3/4 Y
    TYA
    STA interp_tmp + 1
    ASL A
    ADC interp_tmp + 1 ; x3
    ADC interp_tmp
    LSR A
    LSR A
    RTS
.second_quadrant
; Half and half
    TYA
    CLC
    ADC interp_tmp
    LSR A
    RTS
}


.hrcos
; Get the cosine of A (0 .. 255)
; Returns the cosine
    CLC
    ADC #64
.hrsin
; Get the sine of A (0 .. 255)
; Returns the sine
{
    TAX
    BMI negate
    AND #64
    BEQ quarter1
    TXA
    AND #63
    EOR #63
    TAX
.quarter1
    LDA hrsintab, X
    RTS
.negate
    AND #127
    TAX
    AND #64
    BEQ quarter3
    TXA
    AND #63
    TAX
.quarter3
    LDA #255
    SEC
    SBC hrsintab, X
    RTS

}

ALIGN    64
divmaxx = 50000
divmaxy = 32768
divadd = 31
.divtableLX
    FOR n, 1, 64
    EQUB LO(divmaxx / (n + divadd))
    NEXT
.divtableHX
    FOR n, 1, 64
    EQUB HI(divmaxx / (n + divadd))
    NEXT
.divtableLY
    FOR n, 1, 64
    EQUB LO(divmaxy / (n + divadd))
    NEXT
.divtableHY
    FOR n, 1, 64
    EQUB HI(divmaxy / (n + divadd))
    NEXT
IF FALSE
.sintable
    FOR  n, 0, 63
    EQUB SIN(RAD(n * 90 / 64)) * 255
    NEXT
ENDIF
.sincostable
    FOR n, 0, 63
    EQUB SIN(RAD(n * 360 / 64)) * 16
    NEXT
.theight
    FOR n, 1, 64
    EQUB LO(400 / (n + divadd))
    NEXT
.hrsintab
FOR n, 0, 63
    EQUB SIN(RAD(n * 90 / 64)) * 64
NEXT

