particle_count = 16

.particle_xl
    SKIP particle_count
.particle_xh
    SKIP particle_count
.particle_dx
    SKIP particle_count
.particle_yl
    SKIP particle_count
.particle_yh
    SKIP particle_count
.particle_ye
    SKIP particle_count
.particle_dy
    SKIP particle_count
.particle_zl
    SKIP particle_count
.particle_zh
    SKIP particle_count
.particle_dz
    SKIP particle_count
.particle_age
    SKIP particle_count

MACRO MOVPARTXZ dirl, dirh, thrust, delta, negthrust
{
    LDY #0
    LDA delta, X
    ASL A
    ASL A
    BPL deltapositive
    DEY
.deltapositive
    STY jtmp + 2
    ASL A
    ROL jtmp + 2
    ASL A
    ROL jtmp + 2
    STA jtmp + 1
    CLC
    LDY #0
    LDA thrust
    BPL thrustpositive
    DEY
.thrustpositive
IF negthrust
    CLC
    ADC jtmp + 1
    STA jtmp + 1
    TYA
    ADC jtmp + 2
    STA jtmp + 2
ELSE
    SEC
    SBC jtmp + 1
    STA jtmp + 1
    TYA
    SBC jtmp + 2
    STA jtmp + 2
ENDIF
    ORA jtmp + 1
    BEQ nextmove
    LDA dirl, X
    CLC
    ADC jtmp + 1
    STA dirl, X
    LDA dirh, X
    ADC jtmp + 2
    STA dirh, X
.nextmove
}
ENDMACRO

MACRO MOVPARTY dirl, dirh, dire, delta
{
    LDY #0
    LDA delta, X
    ASL A
    ASL A
    BEQ nextmove    ; Delta is zero, so no movement required
    BPL positive
    DEY
.positive
    STY jtmp + 2
    ASL A
    ROL jtmp + 2
    ASL A
    ROL jtmp + 2
    CLC
    ADC dirl, X
    STA dirl, X
    LDA jtmp + 2
    ADC dirh, X
    STA dirh, X
    TYA
    ADC dire, X
    STA dire, X
.nextmove
}
ENDMACRO

.create_particle
{
    LDX current_particle
    DEX
    BPL no_wrap
    LDX #particle_count - 1
.no_wrap
    STX current_particle
    LDA #16
    STA particle_age, X

; Calculate X position
    LDY #0
    LDA particle_xdir
    STA particle_dx, X
    ASL A
    ASL A
    ASL A
    BPL xpos
    DEY
.xpos
    STA particle_xl, X
    TYA
    STA particle_xh, X

; Calculate Z position
    LDY #0
    LDA particle_zdir
    STA particle_dz, X
    ASL A
    ASL A
    ASL A
    BPL zpos
    DEY
.zpos
    STA particle_zl, X
    TYA
    STA particle_zh, X

; Calculate Y position
    LDA #48
    SEC
    SBC player_y
    STA particle_yh, X
    LDA #0
    SBC player_y + 1
    STA particle_ye, X
    ;LDA #0
    ;STA particle_yl, X

    LDY #0
    LDA particle_ydir
    STA particle_dy, X
    ASL A
    ASL A
    ASL A
    BMI ypos
    DEY
.ypos
    CLC
    ADC #0 ;particle_yl, X
    STA particle_yl, X
    TYA
    ADC particle_yh, X
    STA particle_yh, X
    TYA
    ADC particle_ye, X
    STA particle_ye, X
    RTS
}

.move_particles
{
    LDX #particle_count - 1
.particle_loop
    LDA particle_age, X
    BNE particle_young
    JMP particle_old
.particle_young
    DEC particle_age, X
    MOVPARTXZ particle_xl, particle_xh, xthrust, particle_dx, TRUE
    MOVPARTXZ particle_zl, particle_zh, zthrust, particle_dz, TRUE
    MOVPARTY particle_yl, particle_yh, particle_ye, particle_dy
.particle_old
    DEX
    BMI particles_done
    JMP particle_loop
.particles_done
    RTS
}

.plot_particles
{
    LDX #particle_count - 1
.particle_loop
    LDA particle_age, X
    BEQ particle_old
    ;LDA #'a'
    ;JSR oswrch
    STX jtmp
    LDA particle_xh, X
    TAY
    LDA particle_zh, X
    CLC
    ADC #32
    BMI particle_offscreen
    CMP #63
    BCS particle_offscreen

    STA jtmp + 1
    TAX
    JSR depthX
    LDA mathc + 1
    CLC
    ADC #127
    TAX
    LDA mathc + 2
    ADC #0
    BNE particle_offscreen
    STX x0
    ;LDA #'b'
    ;JSR oswrch

    LDX jtmp
    LDA particle_yh, X

    CLC
    ADC actual_landheight
    TAY
    LDA particle_ye, X
    ADC actual_landheight + 1
;    PHP
;    PHA
;    JSR writehex
;    TYA
;    JSR writehex
;    PLA
;    PLP
    BNE particle_offscreen
    ;TYA
    ;BCS particle_offscreen
    ;BMI particle_offscreen
    TYA
    ;LDA #'c'
    ;JSR oswrch

    LDX jtmp + 1
    JSR depthY

    LDA mathc + 1
    CLC
    ADC #land_offset + 8        ; This is the height
    TAY
    LDA mathc + 2
    ADC #0
    BNE particle_offscreen
    ;LDA #'d'
    ;JSR oswrch
    LDX x0
    JSR pixel
    LDX jtmp
    BPL particle_old

.particle_offscreen
    ;PHA
    LDX jtmp
    LDA #0
    STA particle_age, X
    ;PLA
.particle_old
    DEX
    BPL particle_loop
    RTS
}
