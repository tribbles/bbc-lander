oswrch      = &ffee
oscli       = &fff7
osbyte      = &fff4
screen      = &6800
screen1     = &5000
screen2     = &6800

displaysize = 7
centresize  = 3
maxypos     = 24 * 8
platheight  = 240

;map      = &1000 ; 64x64 map

    GUARD    screen1
;GUARD    map

    INCLUDE "zeropage.6502"
    INCLUDE "macros.6502"

    ORG &1a00

.start
    LDX #LO(tape)
    LDY #HI(tape)
    JSR oscli
    JSR set_mode
    JSR init_bits
    JSR init_screen
    JSR clear_bank
    JSR swap_banks
    JSR clear_bank
    JSR fixship

    LDX #4
    JSR set_colour
    LDA #0
    STA xoffset
    STA zoffset

    STA xthrust
    STA ythrust
    STA zthrust
    STA zangle
    STA spiny
    STA spinz

    LDA #192
    STA yangle

    LDA #32
    STA player_x
    STA player_z
    LDA #127
    STA mapx
    STA mapz

    LDA #0
    STA heighty
    STA player_y + 1
    LDA #platheight
    STA player_y

IF (FALSE)    
    LDX #LO(heading_addr)
    LDY #HI(heading_addr)
    LDA #1
    JSR plot_char
    LDA #2
    JSR plot_nextchar
    LDA #3
    JSR plot_nextchar
    LDX #LO(altitude_addr)
    LDY #HI(altitude_addr)
    LDA #4
    JSR plot_char
    LDA #5
    JSR plot_nextchar
    LDA #6
    JSR plot_nextchar

    LDX #LO(direction_addr)
    LDY #HI(direction_addr)
    LDA #13
    JSR plot_char

    LDX #LO(score_addr)
    LDY #HI(score_addr)
    LDA #8
    JSR plot_char

    LDX #LO(fuel_addr)
    LDY #HI(fuel_addr)
    LDA #9
    JSR plot_char
ENDIF

    LDA #&99
    STA current_fuel
    STA current_fuel + 1
    LDA #1
    STA update_fuel

.endforever

    INCLUDE "hcalc.6502"

; Loop 1 - calculate the X and Y coordinates of the map
{
    LDA #0
    STA offset     ; We start off at this point

    LDA mapx
    LSR A
    LSR A
    LSR A
    LSR A
    LSR A
    STA xoffset     ; Calculate the fractional X map display (0..7)

    LDA mapz
    LSR A
    LSR A
    LSR A
    LSR A
    LSR A
    STA zoffset     ; Calculate the fractional Z map display (0..7)

    LDA #displaysize - 1
    STA jtmp        ; This is the current Z coordinate
.zloop
    LDA jtmp        ; (0..<size>)
    ASL A
    ASL A
    ASL A           ; (0..<size>*8)
    ORA zoffset     ; Add in the fractional offset
    STA jtmp + 2
; Get the tree height
    TAY
    LDA theight, Y
    LDY jtmp
    LSR A
    STA treeheight, Y

; Calculate the map position
    LDA mapz + 1
    SEC
    SBC jtmp
    CLC
    ADC #centresize ; Map centre Z
    AND #63
    TAX
    ASL A
    ASL A
    ASL A
    ASL A
    ASL A
    ASL A
    STA mapread + 1 ; A little bit of self-modifying code...
    TXA
    LSR A
    LSR A
    CLC
    ADC #HI(map)
    STA mapread + 2 ; And a bit more...

    LDA #displaysize - 1
    STA jtmp + 1   ; This is the current X coordinate
.xloop
    LDA jtmp + 1
    ASL A
    ASL A
    ASL A
    ADC xoffset    ; This is the fractional offset (carry is clear; jtmp+1 is a maximum of 6)
    SEC
    SBC #centresize + centresize * 8 ; This moves the centre of the display
    TAY
    LDX jtmp + 2
    JSR depthX
    
    LDA mathc + 1
    CLC
    ADC #127
    TAX
    LDA mathc + 2
    ADC #0
    BEQ onscreenx
    BMI toleft
    LDX #255
    BNE onscreenx
.toleft
    LDX #0
.onscreenx
    TXA
    LDY offset
    STA xlocs, Y

    ; Now we add in the map X offset
    LDA mapx + 1
    SEC
    SBC jtmp + 1
    CLC
    ADC #centresize ; Centre it
    AND #63
    TAY
.mapread
    LDA map, Y
    TAY
    AND #192
    LDX jtmp
    CPX #centresize
    BNE notcentre
    LDX jtmp + 1
    CPX #centresize
    BNE notcentre
    STA map_height
.notcentre
    LDX offset
    STA collocs, X
    TYA
    AND #63        ; Remove trees and whatever I want the other bit to be!
    CLC
    ADC land_height
    BCS over_height
    BPL under_height
.over_height
    LDA #127
.under_height
    TAY

    LDX jtmp + 2
    JSR depthY
    
    LDA mathc + 1
    CLC
    ADC #40        ; This is the height
    TAX
    LDA mathc + 2
    ADC #0
    BEQ onscreeny
    BMI above
    LDA #maxypos
    BNE sety
.above
    LDX #0
.onscreeny
    TXA
    CMP #maxypos
    BCC sety
    LDA #maxypos
.sety
    LDY offset
    STA ylocs, Y
    INC offset     ; Go on to the next coordinate
    
    DEC jtmp + 1
    BMI alldonex
    JMP xloop
.alldonex
    DEC jtmp
    BMI alldone
    JMP zloop
.alldone
}
    LDA update_fuel
    BEQ no_fuelupdate
    JSR plot_fuel
    LDA #0
    STA update_fuel
.no_fuelupdate
    JSR move_particles
    JSR swap_banks
    JSR clear_bank

    LDA #255
    STA pixelmask
    STA pixelmask + 1
    STA lastcol

; Loop 2 - draw the horizontal lines
{
    STA lastcol
    LDA #displaysize - 1
    STA jtmp
    LDA #0
    STA offset
.xloop
    LDA #displaysize - 2
    STA jtmp + 1
    LDY offset
    LDA xlocs, Y
    STA ocoord
    LDA ylocs, Y
    STA ocoord + 1
    INC offset
.zloop
    LDA ocoord
    STA x0
    LDA ocoord + 1
    STA y0
    LDY offset
    LDA xlocs, Y
    STA x1
    STA ocoord
    LDA ylocs, Y
    STA y1
    STA ocoord + 1
    LDA collocs, Y
    AND #64
    CMP lastcol
    BEQ colsame
    STA lastcol
    CMP #0
    BNE water
    LDA #255
    STA pixelmask
    STA pixelmask + 1
    BNE colsame
.water
    LDA #&aa
    STA pixelmask
    LSR A
    STA pixelmask + 1
.colsame
    INC offset
    JSR plot_line
    DEC jtmp + 1
    BPL zloop
    DEC jtmp
    BPL xloop
}

; Loop 3 - draw the vertical linzes
{
    LDA #displaysize - 1
    STA jtmp
    LDA #0
    STA offset
.xloop
    LDA #displaysize - 2
    STA jtmp + 1
    LDY offset
    LDA xlocs, Y
    STA ocoord
    LDA ylocs, Y
    STA ocoord + 1
    LDA offset
    CLC
    ADC #displaysize
    STA offset
.zloop
    LDA ocoord
    STA x0
    LDA ocoord + 1
    STA y0
    LDY offset
    LDA xlocs, Y
    STA x1
    STA ocoord
    LDA ylocs, Y
    STA y1
    STA ocoord + 1
    LDA collocs, Y
    AND #64
    CMP lastcol
    BEQ colsame
    STA lastcol
    CMP #0
    BNE water
    LDA #255
    STA pixelmask
    STA pixelmask + 1
    BNE colsame
.water
    LDA #&aa
    STA pixelmask
    LSR A
    STA pixelmask + 1
.colsame
    LDA offset
    CLC
    ADC #displaysize
    STA offset
    JSR plot_line
    DEC jtmp + 1
    BPL zloop
    LDA offset
    SEC
    SBC #displaysize * displaysize - 1
    STA offset
    DEC jtmp
    BPL xloop
}

; Loop 4 - trees
{
    LDA #255
    STA pixelmask
    STA pixelmask + 1

    LDA #displaysize - 1
    STA jtmp
    LDA #0
    STA offset
.xloop
    LDA #displaysize - 1
    STA jtmp + 1
.zloop
    LDY offset
    LDA collocs, Y
    BPL notree

    LDA xlocs, Y
    STA x1
    STA x0
    STA treecx
    LDA ylocs, Y
    STA y1
    STA treey

; Plot the trunk
    LDX jtmp
    LDA treeheight, X
    STA treeh
    LDA y1
    SEC
    SBC treeh
.treeokay
    STA y0
    STA treey
    JSR plot_line

; Plot the base of the triangle
    LDA treey
    STA y1
    LDA treecx
    SEC
    SBC treeh
    BCS left
    LDA #0
.left
    STA x0
    STA ocoord
    LDA treecx
    CLC
    ADC treeh
    BCC right
    LDA #255
.right
    STA x1
    STA treerx
    JSR plot_line

; Plot the left of the triangle
    LDA treelx
    STA x1
    LDA treecx
    STA x0
    LDA treey
    STA y1
    SEC
    SBC treeh
    SBC treeh
    STA y0
    STA treeh       ; Don't need the height any more
    JSR plot_line
; Plot the right of the triangle
    LDA treecx
    STA x0
    LDA treerx
    STA x1
    LDA treey
    STA y1
    LDA treeh
    STA y0
    JSR plot_line
.notree
    INC offset
    DEC jtmp + 1
    BPL zloop
    DEC jtmp
    BMI done
    JMP xloop
.done
}

; Check Y rotation keys
{
    LDA #&81
    LDY #&ff
    LDX #&9e        ; Z
    JSR osbyte
    BCC notleft
    LDY spiny
    CPY #7
    BEQ notleft
    INY
    CPY #7
    BEQ nomoreleft
    INY
.nomoreleft
    STY spiny
.notleft

    LDA #&81
    LDY #&ff
    LDX #&bd        ; X
    JSR osbyte
    BCC notright
    LDY spiny
    CPY #LO(-7)
    BEQ notright
    DEY
    CPY #LO(-7)
    BEQ nomoreright
    DEY
.nomoreright
    STY spiny
.notright

    LDA spiny
    BEQ spinzero
    BMI negspin
    DEC spiny
    BPL spinzero
.negspin
    INC spiny
.spinzero
    LDA yangle
    CLC
    ADC spiny
    ADC spiny
    STA yangle
}

; Check Z rotation keys
{
    LDA #&81
    LDY #&ff
    LDX #&b9        ; K
    JSR osbyte
    BCC notup
    LDY spinz
    CPY #15
    BEQ notup
    INY
    CPY #15
    BEQ nomoreup
    INY
.nomoreup
    STY spinz
.notup

    LDA #&81
    LDY #&ff
    LDX #&9a        ; M
    JSR osbyte
    BCC notdown
    LDY spinz
    CPY #LO(-15)
    BEQ notdown
    DEY
    CPY #LO(-15)
    BEQ nomoredown
    DEY
.nomoredown
    STY spinz
.notdown

    LDA spinz
    BEQ spinzero
    BMI negspin
    DEC spinz
    BPL spinzero
.negspin
    INC spinz
.spinzero
    LDA zangle
    CLC
    ADC spinz
    BPL limitz0
    LDA #0
.limitz0
    CMP #63
    BCC limitz1
    LDA #63
.limitz1
    STA zangle
}

; Check thrust
{
    LDA player_y + 1
    AND #&fe
    BEQ canthrust
    JMP nothrust         ; Not enough oxygen!
.canthrust
    LDA current_fuel
    ORA current_fuel + 1
    BNE enoughfuel
    JMP nothrust
.enoughfuel
    LDA #&81
    LDX #LO(-99)        ; Space
    LDY #&ff
    JSR osbyte
    BCS thrust
    JMP nothrust
.thrust
    LDA current_fuel
    SED
    SEC
    SBC #1
    STA current_fuel
    LDA current_fuel + 1
    SBC #0
    STA current_fuel + 1
    CLD
    INC update_fuel
    
    LDA zangle
    JSR sincos
    STX zcoff
    TYA
    THRUSTADD ythrust

    LDA yangle
    JSR sincos
    STX mathb

    LDX zcoff
    JSR mulxy

    LDA mathc + 1
    ASL mathc
    ROL A
    ASL mathc
    ROL A
    ASL mathc
    ROL A
    ASL mathc
    ROL A
    TAY
    DEY                 ; X direction is negative (for some reason!)
    TYA
    EOR #255
    THRUSTADD xthrust

    LDY mathb
    LDX zcoff
    JSR mulxy
    LDA mathc + 1
    ASL mathc
    ROL A
    ASL mathc
    ROL A
    ASL mathc
    ROL A
    ASL mathc
    ROL A
    THRUSTADD zthrust
.nothrust
    THRUSTDEC xthrust
    THRUSTDEC zthrust

    LDY ythrust
    CPY #LO(-95)
    BEQ nodec
    DEY
    CPY #LO(-95)
    BEQ nolimit
    DEY
    CPY #LO(-95)
    BEQ nolimit
    DEY
.nolimit
    STY ythrust
.nodec
}

; Draw the ship angle on top left
{
    LDA yangle
    JSR sincos
    TYA
    CLC
    ADC #40
    LSR A
    LSR A
    STA x0
    PHA
    TXA
    CLC
    ADC #88
    LSR A
    LSR A
    STA y0
    PHA
    LDA yangle
    CLC
    ADC #100
    JSR sincos
    TYA
    CLC
    ADC #40
    LSR A
    LSR A
    STA x1
    TXA
    CLC
    ADC #88
    LSR A
    LSR A
    STA y1
    JSR plot_line

    PLA
    STA y0
    PLA
    STA x0
    LDA yangle
    SEC
    SBC #100
    JSR sincos
    TYA
    CLC
    ADC #40
    LSR A
    LSR A
    STA x1
    TXA
    CLC
    ADC #88
    LSR A
    LSR A
    STA y1
    JSR plot_line
}

{
    LDA xthrust
    BEQ noxmove
    BMI negxmove
    CLC
    ADC mapx
    STA mapx
    LDA player_x
    ADC #0
    AND #63
    STA player_x
    BPL noxmove
.negxmove
    CLC
    ADC mapx
    STA mapx
    LDA player_x
    SBC #0
    AND #63
    STA player_x
.noxmove
}

{
    LDA zthrust
    BEQ nozmove
    BMI negzmove
    CLC
    ADC mapz
    STA mapz
    LDA player_z
    ADC #0
    AND #63
    STA player_z
    BPL nozmove
.negzmove
    CLC
    ADC mapz
    STA mapz
    LDA player_z
    SBC #0
    AND #63
    STA player_z
.nozmove
}

{
    LDA ythrust
    BEQ noymove
    BMI negymove
    LDX #0
    STX mathc
    ASL A
    ROL mathc
    ASL A
    ROL mathc
    ASL A
    ROL mathc
    ASL A
    ROL mathc
    ;CLC
    ADC heighty
    STA heighty
    LDA mathc
    ADC player_y
    STA player_y
    BCC noymove
    INC player_y + 1
    BNE noymove
.negymove
    LDX #0
    STX mathc
    EOR #255
    CLC
    ADC #1
    ASL A
    ROL mathc
    ASL A
    ROL mathc
    ASL A
    ROL mathc
    ASL A
    ROL mathc
    STA mathc + 1
    LDA heighty
    SEC
    SBC mathc + 1
    STA heighty
    LDA player_y
    SBC mathc
    STA player_y
    LDA player_y + 1
    SBC #0
    STA player_y + 1
    BNE noymove
    LDA player_y
    BMI noymove
    LDA #128
    STA player_y
    LDA #0
    STA heighty
    STA player_y + 1
    STA ythrust
.noymove
}

    JSR plot_ship
    JSR plot_particles

    JMP endforever
    
.xlocs
    SKIP displaysize * displaysize
.ylocs
    SKIP displaysize * displaysize
.collocs
    SKIP displaysize * displaysize
.treeheight
    SKIP displaysize

.plot_tree
    RTS

.mark
    LDX x1
    LDY y1
    DEX
    DEX
    JSR pixelp
    LDX x1
    INX
    INX
    JSR pixelp
    LDX x1
    INY
    INY
    JSR pixelp
    LDY y1
    DEY
    DEY
    JMP pixelp

.plot_fuel
    LDX #LO(fuel_addr)
    LDY #HI(fuel_addr)
    JSR prepare_char
    ;LDA current_fuel + 2
    ;AND #15
    ;JSR plot_nextchar
    LDA current_fuel + 1
    TAY
    LSR A
    LSR A
    LSR A
    LSR A
    JSR plot_nextchar
    TYA
    AND #15
    JSR plot_nextchar
    LDA current_fuel
    TAY
    LSR A
    LSR A
    LSR A
    LSR A
    JSR plot_nextchar
    TYA
    AND #15
    JMP plot_nextchar

.tape
    EQUS "TAPE", 13

    INCLUDE "screen.6502"
    INCLUDE "draw.6502"
    INCLUDE "math.6502"
    INCLUDE "ship.6502"
    INCLUDE "particles.6502"

    ALIGN 256
.map
    INCBIN  "map.bin"
.end
    SKIP 0

    SAVE    "Lander", start, end
