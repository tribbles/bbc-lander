oswrch   = &ffee
screen   = &6800
screen1  = &5000
screen2  = &6800

displaysize = 7
centresize = 3

;map      = &1000 ; 64x64 map

    GUARD    screen1
;GUARD    map

    INCLUDE   "zeropage.6502"

    ORG &2000

.start
    JSR  set_mode
    JSR  init_bits
    JSR  init_screen
    JSR  clear_bank
    JSR  swap_banks
    JSR  clear_bank
    
    LDX  #4
    JSR  set_colour
    LDA  #0
    STA  xoffset
    STA  yoffset

    LDA #2
    STA thrust

    LDA #32
    STA angle
    
.endforever

; Loop 1 - calculate the X and Y coordinates of the map
{
    LDA  #0
    STA  offset     ; We start off at this point

    LDA mapx
    LSR A
    LSR A
    LSR A
    LSR A
    LSR A
    STA xoffset     ; Calculate the fractional X map display

    LDA mapy
    LSR A
    LSR A
    LSR A
    LSR A
    LSR A
    STA yoffset     ; Calculate the fractional Y map display

    LDA  #displaysize - 1
    STA  jtmp       ; This is the current Y coordinate
.yloop
    LDA  jtmp
    ASL  A
    ASL  A
    ASL  A
    ADC  yoffset    ; This is the fractional offset
    STA  jtmp + 2


; Calculate the map position
    LDA mapy + 1
    SEC
    SBC jtmp
    CLC
    ADC #centresize ; Map centre Y
    AND #63
    TAX
    ASL A
    ASL A
    ASL A
    ASL A
    ASL A
    ASL A
    STA mapaddr
    TXA
    LSR A
    LSR A
    CLC
    ADC #HI(map)
    STA mapaddr + 1

    LDA  #displaysize - 1
    STA  jtmp + 1   ; This is the current X coordinate
.xloop
    LDA  jtmp + 1
    ASL  A
    ASL  A
    ASL  A
    ADC  xoffset    ; This is the fractional offset (carry is clear; jtmp+1 is a maximum of 6)
    SEC
    SBC  #centresize + centresize * 8 ; This moves the centre of the display
    TAY
    LDX  jtmp + 2
    JSR  depth
    
    LDA  mathc + 1
    CLC
    ADC  #127
    LDY  offset
    STA  xlocs, Y

    ; Now we add in the map X offset
    LDA mapx + 1
    SEC
    SBC jtmp + 1
    CLC
    ADC #centresize ; Centre it
    AND #63
    TAY
    LDA (mapaddr), Y
    AND #63        ; Remove trees and whatever I want the other bit to be!
    CLC
    ADC #4
    TAY

    LDX  jtmp + 2
    JSR  depth
    
    LDA  mathc + 1
    CLC
    ADC  #32        ; This is the height
    LDY  offset
    STA  ylocs, Y
    INC  offset     ; Go on to the next coordinate
    
    DEC  jtmp + 1
    BPL  xloop
    DEC  jtmp
    BPL  yloop
}

; Loop 2 - draw the horizontal lines
{
    LDA  #displaysize - 1
    STA  jtmp
    LDA  #0
    STA  offset
.xloop
    LDA  #displaysize - 2
    STA  jtmp + 1
    LDY  offset
    LDA  xlocs, Y
    STA  ocoord
    LDA  ylocs, Y
    STA  ocoord + 1
    INC  offset
.yloop
    LDA  ocoord
    STA  x0
    LDA  ocoord + 1
    STA  y0
    LDY  offset
    LDA  xlocs, Y
    STA  x1
    STA  ocoord
    LDA  ylocs, Y
    STA  y1
    STA  ocoord + 1
    INC  offset
    JSR  plot_line
    DEC  jtmp + 1
    BPL  yloop
    DEC  jtmp
    BPL  xloop
}

IF TRUE
; Loop 3 - draw the vertical linzes
{
    LDA  #displaysize - 1
    STA  jtmp
    LDA  #0
    STA  offset
.xloop
    LDA  #displaysize - 2
    STA  jtmp + 1
    LDY  offset
    LDA  xlocs, Y
    STA  ocoord
    LDA  ylocs, Y
    STA  ocoord + 1
    LDA  offset
    CLC
    ADC  #displaysize
    STA  offset
.yloop
    LDA  ocoord
    STA  x0
    LDA  ocoord + 1
    STA  y0
    LDY  offset
    LDA  xlocs, Y
    STA  x1
    STA  ocoord
    LDA  ylocs, Y
    STA  y1
    STA  ocoord + 1
    LDA  offset
    CLC
    ADC  #displaysize
    STA  offset
    JSR  plot_line
    DEC  jtmp + 1
    BPL  yloop
    LDA  offset
    SEC
    SBC  #displaysize * displaysize - 1
    STA  offset
    DEC  jtmp
    BPL  xloop
}
ENDIF
    JSR  swap_banks
    JSR  clear_bank

    LDA angle
    LDY thrust
    JSR sin
    LDA mapy
    CLC
    ADC mathc
    STA mapy
    LDA mapy + 1
    ADC mathc + 1
    STA mapy + 1

    LDA angle
    LDY thrust
    JSR cos
    LDA mapx
    CLC
    ADC mathc
    STA mapx
    LDA mapx + 1
    ADC mathc + 1
    STA mapx + 1
    INC angle

    JMP  endforever
    
.xlocs
    SKIP displaysize * displaysize
.ylocs
    SKIP displaysize * displaysize

.mark
    LDX  x1
    LDY  y1
    DEX
    DEX
    JSR  pixelp
    LDX  x1
    INX
    INX
    JSR  pixelp
    LDX  x1
    INY
    INY
    JSR  pixelp
    LDY  y1
    DEY
    DEY
    JMP  pixelp

    INCLUDE  "screen.6502"
    INCLUDE  "draw.6502"
    INCLUDE  "math.6502"

    ALIGN 256
.map
    INCBIN   "map.bin"
    EQUB 0
.end

    SAVE "Lander", start, end
