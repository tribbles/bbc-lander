oswrch      = &ffee
oscli       = &fff7
osbyte      = &fff4
screen      = &6800
screen1     = &5000
screen2     = &6800

displaysize = 7
centresize  = 3
maxypos     = 24 * 8

;map      = &1000 ; 64x64 map

    GUARD    screen1
;GUARD    map

    INCLUDE "zeropage.6502"
    INCLUDE "macros.6502"

    ORG &1a00

.start
    LDX #LO(tape)
    LDY #HI(tape)
    JSR oscli
    JSR set_mode
    JSR init_bits
    JSR init_screen
    JSR clear_bank
    JSR swap_banks
    JSR clear_bank
    JSR fixship

    LDX #4
    JSR set_colour
    LDA #0
    STA xoffset
    STA yoffset

    STA xthrust
    STA ythrust
    STA zthrust
    STA yangle
    STA zangle
    STA spiny
    STA spinz

    LDA #32
    STA player_x
    STA player_z
    LDA #127
    STA mapx
    STA mapz
    
.endforever

; Loop 1 - calculate the X and Y coordinates of the map
{
    LDA #0
    STA offset     ; We start off at this point

    LDA mapx
    LSR A
    LSR A
    LSR A
    LSR A
    LSR A
    STA xoffset     ; Calculate the fractional X map display (0..7)

    LDA mapz
    LSR A
    LSR A
    LSR A
    LSR A
    LSR A
    STA yoffset     ; Calculate the fractional Z map display (0..7)

    LDA #displaysize - 1
    STA jtmp        ; This is the current Z coordinate
.zloop
    LDA jtmp        ; (0..<size>)
    ASL A
    ASL A
    ASL A           ; (0..<size>*8)
    ORA yoffset     ; Add in the fractional offset
    STA jtmp + 2
; Get the tree height
    TAY
    LDA theight, Y
    LDY jtmp
    LSR A
    STA treeheight, Y

; Calculate the map position
    LDA mapz + 1
    SEC
    SBC jtmp
    CLC
    ADC #centresize ; Map centre Z
    AND #63
    TAX
    ASL A
    ASL A
    ASL A
    ASL A
    ASL A
    ASL A
    STA mapread + 1 ; A little bit of self-modifying code...
    TXA
    LSR A
    LSR A
    CLC
    ADC #HI(map)
    STA mapread + 2 ; And a bit more...

    LDA #displaysize - 1
    STA jtmp + 1   ; This is the current X coordinate
.xloop
    LDA jtmp + 1
    ASL A
    ASL A
    ASL A
    ADC xoffset    ; This is the fractional offset (carry is clear; jtmp+1 is a maximum of 6)
    SEC
    SBC #centresize + centresize * 8 ; This moves the centre of the display
    TAY
    LDX jtmp + 2
    JSR depthX
    
    LDA mathc + 1
    CLC
    ADC #127
    TAX
    LDA mathc + 2
    ADC #0
    BEQ onscreenx
    BMI toleft
    LDX #255
    BNE onscreenx
.toleft
    LDX #0
.onscreenx
    TXA
    LDY offset
    STA xlocs, Y

    ; Now we add in the map X offset
    LDA mapx + 1
    SEC
    SBC jtmp + 1
    CLC
    ADC #centresize ; Centre it
    AND #63
    TAY
.mapread
    LDA map, Y
    TAY
    AND #192
    LDX offset
    STA collocs, X
    TYA
    AND #63        ; Remove trees and whatever I want the other bit to be!
    CLC
    ADC #4
    TAY

    LDX jtmp + 2
    JSR depthY
    
    LDA mathc + 1
    CLC
    ADC #40        ; This is the height
    TAX
    LDA mathc + 2
    ADC #0
    BEQ onscreeny
    BMI above
    LDA #maxypos
    BNE sety
.above
    LDX #0
.onscreeny
    TXA
    CMP #maxypos
    BCC sety
    LDA #maxypos
.sety
    LDY offset
    STA ylocs, Y
    INC offset     ; Go on to the next coordinate
    
    DEC jtmp + 1
    BPL xloop
    DEC jtmp
    BMI alldone
    JMP zloop
.alldone
}

    LDA #255
    STA pixelmask
    STA pixelmask + 1
    STA lastcol

; Loop 2 - draw the horizontal lines
{
    STA lastcol
    LDA #displaysize - 1
    STA jtmp
    LDA #0
    STA offset
.xloop
    LDA #displaysize - 2
    STA jtmp + 1
    LDY offset
    LDA xlocs, Y
    STA ocoord
    LDA ylocs, Y
    STA ocoord + 1
    INC offset
.zloop
    LDA ocoord
    STA x0
    LDA ocoord + 1
    STA y0
    LDY offset
    LDA xlocs, Y
    STA x1
    STA ocoord
    LDA ylocs, Y
    STA y1
    STA ocoord + 1
    LDA collocs, Y
    AND #64
    CMP lastcol
    BEQ colsame
    STA lastcol
    CMP #0
    BNE water
    LDA #255
    STA pixelmask
    STA pixelmask + 1
    BNE colsame
.water
    LDA #&aa
    STA pixelmask
    LSR A
    STA pixelmask + 1
.colsame
    INC offset
    JSR plot_line
    DEC jtmp + 1
    BPL zloop
    DEC jtmp
    BPL xloop
}

; Loop 3 - draw the vertical linzes
{
    LDA #displaysize - 1
    STA jtmp
    LDA #0
    STA offset
.xloop
    LDA #displaysize - 2
    STA jtmp + 1
    LDY offset
    LDA xlocs, Y
    STA ocoord
    LDA ylocs, Y
    STA ocoord + 1
    LDA offset
    CLC
    ADC #displaysize
    STA offset
.zloop
    LDA ocoord
    STA x0
    LDA ocoord + 1
    STA y0
    LDY offset
    LDA xlocs, Y
    STA x1
    STA ocoord
    LDA ylocs, Y
    STA y1
    STA ocoord + 1
    LDA collocs, Y
    AND #64
    CMP lastcol
    BEQ colsame
    STA lastcol
    CMP #0
    BNE water
    LDA #255
    STA pixelmask
    STA pixelmask + 1
    BNE colsame
.water
    LDA #&aa
    STA pixelmask
    LSR A
    STA pixelmask + 1
.colsame
    LDA offset
    CLC
    ADC #displaysize
    STA offset
    JSR plot_line
    DEC jtmp + 1
    BPL zloop
    LDA offset
    SEC
    SBC #displaysize * displaysize - 1
    STA offset
    DEC jtmp
    BPL xloop
}

; Loop 4 - trees
{
    LDA #255
    STA pixelmask
    STA pixelmask + 1

    LDA #displaysize - 1
    STA jtmp
    LDA #0
    STA offset
.xloop
    LDA #displaysize - 1
    STA jtmp + 1
.zloop
    LDY offset
    LDA collocs, Y
    BPL notree

    LDA xlocs, Y
    STA x1
    STA x0
    STA treecx
    LDA ylocs, Y
    STA y1
    STA treey

; Plot the trunk
    LDX jtmp
    LDA treeheight, X
    STA treeh
    LDA y1
    SEC
    SBC treeh
.treeokay
    STA y0
    STA treey
    JSR plot_line

; Plot the base of the triangle
    LDA treey
    STA y1
    LDA treecx
    SEC
    SBC treeh
    BCS left
    LDA #0
.left
    STA x0
    STA ocoord
    LDA treecx
    CLC
    ADC treeh
    BCC right
    LDA #255
.right
    STA x1
    STA treerx
    JSR plot_line

; Plot the left of the triangle
    LDA treelx
    STA x1
    LDA treecx
    STA x0
    LDA treey
    STA y1
    SEC
    SBC treeh
    SBC treeh
    STA y0
    STA treeh       ; Don't need the height any more
    JSR plot_line
; Plot the right of the triangle
    LDA treecx
    STA x0
    LDA treerx
    STA x1
    LDA treey
    STA y1
    LDA treeh
    STA y0
    JSR plot_line
.notree
    INC offset
    DEC jtmp + 1
    BPL zloop
    DEC jtmp
    BMI done
    JMP xloop
.done
}
    JSR plot_ship

    JSR swap_banks
    JSR clear_bank

{
    LDA #&81
    LDY #&ff
    LDX #&9e        ; Z
    JSR osbyte
    BCC notleft
    LDY spiny
    CPY #7
    BEQ notleft
    INY
    CPY #7
    BEQ nomoreleft
    INY
.nomoreleft
    STY spiny
.notleft

    LDA #&81
    LDY #&ff
    LDX #&bd        ; X
    JSR osbyte
    BCC notright
    LDY spiny
    CPY #LO(-7)
    BEQ notright
    DEY
    CPY #LO(-7)
    BEQ nomoreright
    DEY
.nomoreright
    STY spiny
.notright

    LDA spiny
    BEQ spinzero
    BMI negspin
    DEC spiny
    BPL spinzero
.negspin
    INC spiny
.spinzero
    LDA yangle
    CLC
    ADC spiny
    ADC spiny
    STA yangle
}

{
    LDA #&81
    LDY #&ff
    LDX #&9a        ; M
    JSR osbyte
    BCC notup
    LDY spinz
    CPY #15
    BEQ notup
    INY
    CPY #15
    BEQ nomoreup
    INY
.nomoreup
    STY spinz
.notup

    LDA #&81
    LDY #&ff
    LDX #&b9        ; K
    JSR osbyte
    BCC notdown
    LDY spinz
    CPY #LO(-15)
    BEQ notdown
    DEY
    CPY #LO(-15)
    BEQ nomoredown
    DEY
.nomoredown
    STY spinz
.notdown

    LDA spinz
    BEQ spinzero
    BMI negspin
    DEC spinz
    BPL spinzero
.negspin
    INC spinz
.spinzero
    LDA zangle
    CLC
    ADC spinz
    BPL limitz0
    LDA #0
.limitz0
    CMP #63
    BCC limitz1
    LDA #63
.limitz1
    STA zangle
}

{
    LDA #&81
    LDX #&ff            ; Shift
    LDY #&ff
    JSR osbyte
    BCC noshift
    LDA yangle
    JSR sincos
    INY                 ; X direction is negative (for some reason!)
    TYA
    EOR #255
    THRUSTADD xthrust
    TXA
    THRUSTADD zthrust
.noshift
    THRUSTDEC xthrust
    THRUSTDEC ythrust
    THRUSTDEC zthrust
}

; Draw the ship angle on top left
{
    LDA yangle
    JSR sincos
    TYA
    CLC
    ADC #48
    LSR A
    STA x0
    TXA
    CLC
    ADC #48
    LSR A
    STA y0
    LDA #24
    STA x1
    STA y1
    JSR plot_line
}

{
    LDA xthrust
    BEQ noxmove
    BMI negxmove
    CLC
    ADC mapx
    STA mapx
    LDA player_x
    ADC #0
    AND #63
    STA player_x
    BPL noxmove
.negxmove
    CLC
    ADC mapx
    STA mapx
    LDA player_x
    SBC #0
    AND #63
    STA player_x
.noxmove
}
{
    LDA zthrust
    BEQ nozmove
    BMI negzmove
    CLC
    ADC mapz
    STA mapz
    LDA player_z
    ADC #0
    AND #63
    STA player_z
    BPL nozmove
.negzmove
    CLC
    ADC mapz
    STA mapz
    LDA player_z
    SBC #0
    AND #63
    STA player_z
.nozmove
}

{
    LDA ythrust
    BEQ noymove
    BMI negymove
    CLC
    ADC heighty
    STA heighty
    LDA player_y
    ADC #0
    AND #63
    STA player_y
    BPL noymove
.negymove
    CLC
    ADC heighty
    STA heighty
    LDA player_y
    SBC #0
    AND #63
    STA player_y
.noymove
}

    JMP endforever
    
.xlocs
    SKIP displaysize * displaysize
.ylocs
    SKIP displaysize * displaysize
.collocs
    SKIP displaysize * displaysize
.treeheight
    SKIP displaysize

.plot_tree
    RTS

.mark
    LDX x1
    LDY y1
    DEX
    DEX
    JSR pixelp
    LDX x1
    INX
    INX
    JSR pixelp
    LDX x1
    INY
    INY
    JSR pixelp
    LDY y1
    DEY
    DEY
    JMP pixelp

.tape
    EQUS "TAPE", 0

    INCLUDE "screen.6502"
    INCLUDE "draw.6502"
    INCLUDE "math.6502"
    INCLUDE "ship.6502"

    ALIGN 256
.map
    INCBIN  "map.bin"
    EQUB 0
.end

    SAVE    "Lander", start, end
